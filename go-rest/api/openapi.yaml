openapi: "3.0.0"
info:
  version: 1.0.0
  title: User API
  description: A simple API to manage users
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /users:
    post:
      description: Create a new user
      operationId: addUser
      requestBody:
        $ref: "#/components/requestBodies/AddUser"
      responses:
        "200":
          description: user response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: user already exists
          content:
            application/json:
              $ref: "#/components/responses/Conflict"
        default:
          description: unexpected error
          content:
            application/json:
              $ref: "#/components/responses/Unauthorized"
  /users/{id}:
    get:
      description: Returns a user based on a single ID
      operationId: findUser
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user response
          content:
            application/json:
              $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          description: unexpected error
          content:
            application/json:
              $ref: "#/components/responses/Unauthorized"
  /health:
    get:
      description: Returns health status of the service
      operationId: health
      responses:
        "200":
          description: health response
          content:
            application/json:
              $ref: "#/components/responses/Health"
        default:
          description: unexpected error
          content:
            application/json:
              $ref: "#/components/responses/Unauthorized"
components:
  requestBodies:
    AddUser:
      description: User to add
      content:
        application/json:
          schema:
            firstName:
              type: string
            lastName:
              type: string
            age:
              type: integer
          required:
            - firstName
            - lastName
            - age
  responses:
    Health:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Health"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: The specified resource was found but there was a conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Health:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - healthy
            - unhealthy
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - age
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: integer
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
